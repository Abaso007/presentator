/**
 * Handles styled context menu popovers.
 *
 * @example
 * 1) Markup
 * ```
 * <div class="popup" data-overlay-close="true">
 *     <div class="popup-content">
 *         <h3 class="popup-title">My Popup title</h3>
 *         <span class="popup-close close-icon"></span>
 *         <div class="content">
 *             <p>Lorem ipsum...</p>
 *         </div>
 *     </div>
 * </div>
 * ```
 *
 * 2) Init/Open/Close
 * ```
 * // init
 * var menu = new ContextMenu();
 * // open (programmatically)
 * menu.open(10, 20, '.item');
 * // close (programmatically)
 * menu.close();
 * ```
 *
 * @param {Object} data
 * @author Gani Georgiev <gani.georgiev@gmail.com>
 */
var ContextMenu = function(data) {
    data = typeof data === 'object' ? data : {};

    var defaults = {
        'menu':               '#context_menu',
        'relItem':            '.context-layer',
        'exclude':            ['.active', '.bulk-selected'],
        'activeMenuClass':    'active',
        'activeBodyClass':    'context-menu-active',
        'activeRelItemClass': 'context-menu-item',
    };
    this.settings = $.extend({}, defaults, data);

    // cached selectors
    this.$window   = $(window);
    this.$document = $(document);
    this.$body     = $('body');
    this.$menu     = $(this.settings.menu);

    this.init();
};

/**
 * Main class initialization method.
 */
ContextMenu.prototype.init = function() {
    var self = this;


    self.$document.off('contextmenu.prContextMenu', '[data-context-menu]');
    self.$document.on('contextmenu.prContextMenu', '[data-context-menu]', function(e) {
        if (!self.isExcluded(this)) {
            e.preventDefault();
            var $menu = $(this).data('context-menu');
            self.openContextMenu(e.pageX, e.pageY, this);
        }
    });

    // Show context menu
    self.$document.off('contextmenu.prContextMenu', self.settings.relItem);
    self.$document.on('contextmenu.prContextMenu', self.settings.relItem, function(e) {
        if (!self.isExcluded(this)) {
            e.preventDefault();
            self.openContextMenu(e.pageX, e.pageY, this);
        }
    });

    // Hide context menu
    self.$document.off('click.prContextMenu');
    self.$document.on('click.prContextMenu', function(e) {
        if (self.$body.hasClass(self.settings.activeBodyClass)
            // !self.$menu.is(e.target) &&
            // self.$menu.find(e.target).length === 0
        ) {
            e.preventDefault();

            self.closeContextMenu();
        }
    });
};

/**
 * Shows and positions the context menu.
 * @param {Number} cursorX
 * @param {Number} cursorY
 * @param {Mixed}  relItem
 */
ContextMenu.prototype.openContextMenu = function(cursorX, cursorY, relItem) {
    var self = this;
    var posX = 0;
    var posY = 0;

    self.$menu.trigger('contextMenuOpenStart');

    self.$menu.addClass(self.settings.activeMenuClass);
    self.$body.addClass(self.settings.activeBodyClass);
    $(relItem).addClass(self.settings.activeRelItemClass);

    var menuWidth  = self.$menu.outerWidth();
    var menuHeight = self.$menu.outerHeight();

    // calculate horizontal menu position
    if (cursorX + menuWidth < self.$window.width()) {
        // position to the right
        posX = cursorX;
    } else {
        // position to the left
        posX = cursorX - menuWidth;
    }

    // calculate vertical menu position
    if (cursorY + menuHeight < self.$window.height()) {
        // position to the bottom
        posY = cursorY;
    } else {
        // position to the top
        posY = cursorY - menuHeight;
    }

    self.$menu.css({
        'left': posX,
        'top':  posY
    })

    self.$menu.trigger('contextMenuOpenEnd', item);
};

/**
 * Hides active context menu.
 */
ContextMenu.prototype.closeContextMenu = function() {
    var self = this;

    if (!self.$menu.hasClass(self.settings.activeMenuClass)) {
        return; // nothing to hide
    }

    self.$menu.trigger('contextMenuCloseStart');

    self.$menu.removeClass(self.settings.activeMenuClass);
    self.$body.removeClass(self.settings.activeBodyClass);
    $(self.settings.relItem).removeClass(self.settings.activeRelItemClass);

    self.$menu.trigger('contextMenuCloseEnd');
};

/**
 * Check if a relItem selector have to be ignored/excluded.
 * @param  {Mixed} relItem
 * @return {Boolean}
 */
ContextMenu.prototype.isExcluded = function(relItem) {
    var self     = this;
    var $relItem = $(relItem);

    if (self.settings.exclude && self.settings.exclude.length) {
        for (var i = 0; i < self.settings.exclude.length; i++) {
            if ($relItem.hasClass(self.settings.exclude[i])) {
                return true;
            }
        }
    }

    return false;
},
